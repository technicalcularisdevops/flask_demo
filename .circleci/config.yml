# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  # The python orb contains a set of prepackaged CircleCI configuration you can use repeatedly in your configuration files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@1.5.0
  aws-ecr: circleci/aws-ecr@8.1.2
  aws-ecs: circleci/aws-ecs@03.0.0

executors:
  docker-publisher:
    environment:
      IMAGE_NAME: docker_flask_demo_app
    docker:
      - image: cimg/python:3.10.2
      
# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build-develop:
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker
      - python/install-packages:
          pkg-manager: pip
      - run:
          name: Build Docker image
          command: docker build -t $DOCKERHUB_USERNAME/$IMAGE_NAME:latest .
  
  build-staging: # This is the name of the job, feel free to change it to better match what you're trying to do!
    # These next lines defines a Docker executors: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of the convenience images from CircleCI's Developer Hub
    # A list of available CircleCI Docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
    # The executor is the environment in which the steps below will be executed - below will use a python 3.10.2 container
    # Change the version below to your required version of python
    #docker:
    #  - image: cimg/python:3.10.2
    # Checkout the code as the first step. This is a dedicated CircleCI step.
    # The python orb's install-packages step will install the dependencies from a Pipfile via Pipenv by default.
    # Here we're making sure we use just use the system-wide pip. By default it uses the project root's requirements.txt.
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker
      - python/install-packages:
          pkg-manager: pip
          # app-dir: ~/project/package-directory/  # If you're requirements.txt isn't in the root directory.
          # pip-dependency-file: test-requirements.txt  # if you have a different name for your requirements file, maybe one that combines your runtime and test requirements.
      # - run:
      #     name: Run tests
      #     # This assumes pytest is installed via the install-package step above
      #     command: pytest
      - run:
          name: Build Docker image
          command: docker build -t $DOCKERHUB_USERNAME/$IMAGE_NAME:latest .
      - run:
          name: Archive Docker image
          command: docker save -o image.tar $DOCKERHUB_USERNAME/$IMAGE_NAME
      - persist_to_workspace:
          root: .
          paths:
            - ./image.tar
  publish-staging-latest-to-dockerhub:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push $DOCKERHUB_USERNAME/$IMAGE_NAME:latest

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  staging: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build-staging:
          filters:
            branches:
              only: staging
      - publish-staging-latest-to-dockerhub:
          requires:
            - build-staging
          context:
            - docker_credentials
          filters:
            branches:
              only: staging
      - aws-ecr/build-and-push-image:
          registry-id: AWS_ECR_REGISTRY_ID
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          region: '${AWS_REGION}'
          create-repo: true
          dockerfile: Dockerfile
          path: .
          repo: docker_flask_demo
          tag: 'latest'
          filters:
            branches:
              only: staging
  develop:
    jobs:
      - build-develop:
        filters:
          branches:
            only: develop